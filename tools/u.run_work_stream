#!/bin/bash
usage()
{
cat <<EOT
  ${0##*/} [-clone] [-instances n|@mapfile] [-debug 0|1|2] -t mseconds -cpus ncpus [-cpumap map] -name stream_name -maxidle nseconds -queues q1 q2 ... qn [--] "arguments_for_ord_soumet"
  arguments_for_ord_soumet may include -q, -jn, and any other relevant argument
  example of map file (4 instances, 4 lines)  sequence of [ALL|node_no number_cpus] number_cpus=0 allowed
ALL 1 1 0 2 3 3 3  # ALL nodes 1 cpu by default, node 1 : 0 cpus, node 2 : 3 cpus, node 3 : 3 cpus for instance no 1
ALL 2              # 2 cpus on all nodes for instance no 2
ALL 1              # 1 cpus on all nodes for instance no 3
ALL 6              # 6 cpus on all nodes for instance no 4
  example of cpu map ( all instances min1 max 3 cpus by default, instance 2 between 1 and 6 cpus, instance 4 between 5 and 18 cpus)
  '1,3 2:1,6 4:5,18'
  queues may be prepended by instance_no: in which case said queue qill only be monitored by instance instance_no
  practical example:
  ${0##*/} -instances @MapFile -debug 1 -t 36000 -cpus 36 -cpumap '1,3 2:1,6 4:5,18' -name xxx -maxidle 600 -queues qall 1:q1 2:q2 3:q3 4:q4 -- -q hb
  36 cpu job called STREAM_xxx sent to guillimin's hb queue, will live up to 10 hours with 10 min max idle time, see above for instance and cpu map
EOT
exit ${ErrStatus:-0}
}
while [[ -n "$1" ]] ; do
case $1 in
 -h|--help)
    usage
    ;;
 -instances)
    instances="$2"
    shift; shift;
    ;;
 -t)
    walltime="$2"
    shift; shift;
    ;;
 -clone)
    AutoResubmit="yes"
    shift;
    ;;
 -dry-run)
    DryRun="1"
    shift;
    ;;
 -queues)
    queues=""
    shift;
    ;;
 -name)
    name="$2"
    shift; shift
    ;;
 -cpus)
    cpus=$2
    shift; shift
    ;;
 -cpumap)
    cpumap=$2
    shift; shift
    ;;
 -debug)
    debug=$2
    shift; shift
    ;;
 -maxidle)
    maxidle=$2
    shift; shift
    ;;
 --)
    shift
    break
    ;;
 -*)
    break
    ;;
 *)
    queues="$queues ${1} ${1}-1"
#    printf " $1"
    shift
    ;;
esac
done
ErrStatus=1
[[ -n "$cpumap" ]] && cpumap="-cpumap $cpumap"
[[ -z "$walltime" ]] && echo "ERROR: -t is mandatory"       && usage
[[ -z "$cpus" ]]     && echo "ERROR: -cpus is mandatory"    && usage
[[ -z "$queues" ]]   && echo "ERROR: -queues is mandatory"  && usage
[[ -z "$maxidle" ]]  && echo "ERROR: -maxidle is mandatory" && usage
[[ -z "$name" ]]     && echo "ERROR: -name is mandatory"    && usage
[[ -n "$DryRun" ]]   && echo DRY RUN                        && exit 0
#printf "\n"
#echo arguments to soumet are "$@"
for i in $queues ; do mkdir -p ${HOME}/.job_queues/$i ; done
unset QUEUE_1CPU
unset QUEUE_2CPU
unset QUEUE_3CPU
unset QUEUE_4CPU
[[ "${AutoResubmit}" == yes ]] && NoSubmit="-nosubmit" && mkdir -p ${HOME}/.ord_soumet.d/wrap/lajob.tar && JobTar="${HOME}/.ord_soumet.d/wrap/lajob.tar/$(hostname)-$(date +%F_%R:%S)"
#echo "${0%/*}/run_work_stream+ -debug ${debug:-0} -instances ${instances:-1} ${cpumap} -name $name -maxidle $maxidle -queues $queues"
set -x
cat <<EOJ | ord_soumet - -t ${walltime} -mpi -cpus ${cpus}x1 -jn STREAM_${name} "$@" -shell nologin -nosubmit -jobtar ${JobTar}
export JobTar=${JobTar}
${0%/*}/run_work_stream+ -debug ${debug:-0} -instances ${instances:-1} ${cpumap} -name $name -maxidle $maxidle -queues $queues
TimeNow=\$(date +%s)
((TimeLeft=JobStartTime+JobTimeLimit-TimeNow))
((TimeLeft>100)) && rm ${JobTar}.tar
[[ -f ${JobTar}.tar ]] && $(which soumet_lajob) ${JobTar}.tar
EOJ

